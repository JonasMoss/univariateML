#'
#' Calculates the estimates using \code{nlm} and an exponential transform of the
#'     location parameter. If \code{n < 5}, an exact solution is reported. In
#'     the edge case where no maximum likelihood estimator exists and error is
#'     thrown.
#'
#' @param x The data from which the estimate is to be computed.
#' @param na.rm logical. Should missing values be removed?
#' @return A named numeric vector with maximum likelihood estimates for
#' \code{location} and \code{scale}.
#' @export
mllogis = function(x, na.rm = FALSE) {
if(na.rm) x = x[!is.na(x)] else assertthat::assertthat(!anyNA(x))
m = median(x)
mad = median(abs(x - m))
start = c(median(x), log(mad))
f = function(p) -sum(dlogis(x, p[1], exp(p[2]), log = TRUE))
values = nlm(f = f,
p = start)$estimate
object = c(location = values[1],
scale = exp(values[2]))
class(object) = "univariateML"
attr(object, "model") = "Logistic"
object
}
mllogis(x)
#' Estimates the parameter of the logistic distribution using maximum likelihood
#'
#' Calculates the estimates using \code{nlm} and an exponential transform of the
#'     location parameter. If \code{n < 5}, an exact solution is reported. In
#'     the edge case where no maximum likelihood estimator exists and error is
#'     thrown.
#'
#' @param x The data from which the estimate is to be computed.
#' @param na.rm logical. Should missing values be removed?
#' @return A named numeric vector with maximum likelihood estimates for
#' \code{location} and \code{scale}.
#' @export
mllogis = function(x, na.rm = FALSE) {
if(na.rm) x = x[!is.na(x)] else assertthat::assert_that(!anyNA(x))
m = median(x)
mad = median(abs(x - m))
start = c(median(x), log(mad))
f = function(p) -sum(dlogis(x, p[1], exp(p[2]), log = TRUE))
values = nlm(f = f,
p = start)$estimate
object = c(location = values[1],
scale = exp(values[2]))
class(object) = "univariateML"
attr(object, "model") = "Logistic"
object
}
mllogis(x)
x
median(x)
mean)x
mean(x)
mean(abs(x - m))
m = median(x)
mad = median(abs(x - m))
mad
mean(abs(x - m))
dlogis
mllogis(c(x, NA))
?runif
extraDistr::dbetapr()
extraDistr::dbetapr
devtools::load_all(".")
x = extraDistr::rbetapr(1000, 2, 7)
mlbetapr(x)
devtools::load_all(".")
mlbetapr(x)
?debta
?dbeta
drayleigh
extraDistr::drayleigh
devtools::load_all(".")
x = extraDistr::drayleigh(x)
x = extraDistr::drayleigh(x, sigma = 7)
x = extraDistr::rrayleigh(1000, sigma = 7)
mlrayleigh(x)
devtools::load_all(".")
mlrayleigh(x)
extraDistr::dfrechet()
extraDistr::dinvchisq
?extraDistr::dinvchisq
library("extraDistr")
dlomax
?dlomax
k = 1000
x = rcauchy(2*k + 1, 2, 1)
x = sort(x)
m = median(x)
mad = median(abs(x - m))
values = nlm(f = function(p) -sum(dcauchy(x, p[1], exp(p[2]), log = TRUE)),
p = c(median(x), log(mad)))$estimate
values = c(values[1], exp(values[2]))
f = function(theta){
sapply(theta, function(theta) 2*sum((x - theta)/(1 + (x - theta)^2)))
}
g = function(theta){
sapply(theta, function(theta) sum(2*(x - theta)/(1 + (x - theta)^2)))
}
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
j = 1
sigma = 1
f = function(theta){
sapply(theta, function(theta) 2*sum((x - theta)/(sigma + (x - theta)^2)))
}
g = function(theta){
sapply(theta, function(theta) sum(2*(x - theta)/(1 + (x - theta)^2)))
}
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
k = 10
x = rcauchy(2*k + 1, 2, 1)
x = sort(x)
m = median(x)
mad = median(abs(x - m))
values = nlm(f = function(p) -sum(dcauchy(x, p[1], exp(p[2]), log = TRUE)),
p = c(median(x), log(mad)))$estimate
values = c(values[1], exp(values[2]))
sigma = 1
f = function(theta){
sapply(theta, function(theta) 2*sum((x - theta)/(sigma + (x - theta)^2)))
}
g = function(theta){
sapply(theta, function(theta) sum(2*(x - theta)/(1 + (x - theta)^2)))
}
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
sigma = 2
f = function(theta){
sapply(theta, function(theta) 2*sum((x - theta)/(sigma + (x - theta)^2)))
}
g = function(theta){
sapply(theta, function(theta) sum(2*(x - theta)/(1 + (x - theta)^2)))
}
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
sigma = 6
f = function(theta){
sapply(theta, function(theta) 2*sum((x - theta)/(sigma + (x - theta)^2)))
}
g = function(theta){
sapply(theta, function(theta) sum(2*(x - theta)/(1 + (x - theta)^2)))
}
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 1), type = "l")
lines(y, f(y, sigma = 2), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
f = function(theta, sigma = 1){
sapply(theta, function(theta) 2*sum((x - theta)/(sigma + (x - theta)^2)))
}
g = function(theta){
sapply(theta, function(theta) sum(2*(x - theta)/(1 + (x - theta)^2)))
}
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 1), type = "l")
lines(y, f(y, sigma = 2), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 1), type = "l")
lines(y, f(y, sigma = 2), type = "l")
lines(y, f(y, sigma = 0.5), type = "l")
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 1), type = "l")
lines(y, f(y, sigma = 2), type = "l")
lines(y, f(y, sigma = 0.5), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
m = median(x)
mad = median(abs(x - m))
values = nlm(f = function(p) -sum(dcauchy(x, p[1], exp(p[2]), log = TRUE)),
p = c(median(x), log(mad)))$estimate
values = c(values[1], exp(values[2]))
k = 10
x = rcauchy(2*k + 1, 2, 1)
x = sort(x)
m = median(x)
mad = median(abs(x - m))
values = nlm(f = function(p) -sum(dcauchy(x, p[1], exp(p[2]), log = TRUE)),
p = c(median(x), log(mad)))$estimate
values = c(values[1], exp(values[2]))
f = function(theta, sigma = 1){
sapply(theta, function(theta) 2*sum((x - theta)/(sigma + (x - theta)^2)))
}
g = function(theta){
sapply(theta, function(theta) sum(2*(x - theta)/(1 + (x - theta)^2)))
}
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 1), type = "l")
lines(y, f(y, sigma = 2), type = "l")
lines(y, f(y, sigma = 0.5), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
m = median(x)
mad = median(abs(x - m))
values = nlm(f = function(p) -sum(dcauchy(x, p[1], exp(p[2]), log = TRUE)),
p = c(median(x), log(mad)))$estimate
values = c(values[1], exp(values[2]))
k = 10
x = rcauchy(2*k + 1, 2, 1)
x = sort(x)
m = median(x)
mad = median(abs(x - m))
values = nlm(f = function(p) -sum(dcauchy(x, p[1], exp(p[2]), log = TRUE)),
p = c(median(x), log(mad)))$estimate
values = c(values[1], exp(values[2]))
f = function(theta, sigma = 1){
sapply(theta, function(theta) 2*sum((x - theta)/(sigma + (x - theta)^2)))
}
g = function(theta){
sapply(theta, function(theta) sum(2*(x - theta)/(1 + (x - theta)^2)))
}
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 1), type = "l")
lines(y, f(y, sigma = 2), type = "l")
lines(y, f(y, sigma = 0.5), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 1), type = "l")
lines(y, f(y, sigma = 2), type = "l")
lines(y, f(y, sigma = 0.1), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 1), type = "l")
lines(y, f(y, sigma = 2), type = "l")
lines(y, f(y, sigma = 0.01), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
f = function(theta, sigma = 1){
sapply(theta, function(theta) 2*sum((x - theta)/(sigma^2 + (x - theta)^2)))
}
g = function(theta){
sapply(theta, function(theta) sum(2*(x - theta)/(1 + (x - theta)^2)))
}
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 1), type = "l")
lines(y, f(y, sigma = 2), type = "l")
lines(y, f(y, sigma = 0.01), type = "l")
points(x, f(x), pch = 20)
abline(h = 0)
abline(v = median(x))
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 0.01), type = "l")
lines(y, f(y, sigma = 2), type = "l")
lines(y, f(y, sigma = 1), type = "l")
points(x, f(x, 0.01), pch = 20)
abline(h = 0)
abline(v = median(x))
y = seq(min(x), max(x) + 0.05, by = 0.05)
plot(y, f(y, sigma = 0.1), type = "l")
lines(y, f(y, sigma = 2), type = "l")
lines(y, f(y, sigma = 1), type = "l")
points(x, f(x, 0.1), pch = 20)
abline(h = 0)
abline(v = median(x))
library("extraDistr")
?dgev
extraDistr::truncnorm
extraDistr::dtnorm
?extraDistr::dtnorm
x = rtnorm(1000, 0, 1, 1 6)
x = rtnorm(1000, 0, 1, 1, 6)
a = 1
b = 6
start = c(mean(x), sd(x))
S = mean(x^2)
M = mean(x)
n = length(x)
f = function(p) {
mu = p[1]
sigma = p[2]
1/(2*sigma^2)*(S - 2*mu*M + 1/n*mu^2) + log(sigma) +
log(pnorm((a - mu)/sigma) - pnorm((b - mu)/sigma))
}
values = nlm(f = f,
p = start)$estimate
b
start = c(mean(x), sd(x))
S = mean(x^2)
M = mean(x)
n = length(x)
f = function(p) {
mu = p[1]
sigma = p[2]
1/(2*sigma^2)*(S - 2*mu*M + 1/n*mu^2) + log(sigma) +
log(pnorm((b - mu)/sigma) - pnorm((a - mu)/sigma))
}
values = nlm(f = f,
p = start)$estimate
values
x = rtnorm(1000, 0, 1, 1, 6)
warnings()
start = c(mean(x), log(sd(x)))
S = mean(x^2)
M = mean(x)
n = length(x)
f = function(p) {
mu = p[1]
sigma = exp(p[2])
1/(2*sigma^2)*(S - 2*mu*M + 1/n*mu^2) + log(sigma) +
log(pnorm((b - mu)/sigma) - pnorm((a - mu)/sigma))
}
values = nlm(f = f,
p = start)$estimate
vaues
values
Mvalues
M
S
mean(X)
mean(x)
sd(x)
var(x)
''
start = c(mean(x), log(sd(x)))
S = mean(x^2)
M = mean(x)
n = length(x)
f = function(p) {
mu = p[1]
sigma = exp(p[2])
1/(2*sigma^2)*(S - 2*mu*M + 1/n*mu^2) + log(sigma) +
log(pnorm((b - mu)/sigma) - pnorm((a - mu)/sigma))
}
values = nlm(f = f,
p = start)$estimate
warning
warnings
warnings()
min(x)
max(x)
assertthat::assert_that(max(x) <= b)
start = c(mean(x), log(sd(x)))
S = mean(x^2)
M = mean(x)
n = length(x)
f = function(p) {
mu = p[1]
sigma = exp(p[2])
1/(2*sigma^2)*(S - 2*mu*M + 1/n*mu^2) + log(sigma) +
log(pnorm((b - mu)/sigma) - pnorm((a - mu)/sigma))
}
values = nlm(f = f,
p = start)$estimate
values
exp(values)
start = c(mean(x), sd(x))
S = mean(x^2)
M = mean(x)
n = length(x)
f = function(p) {
mu = p[1]
sigma = p[2]
1/(2*sigma^2)*(S - 2*mu*M + 1/n*mu^2) + log(sigma) +
log(pnorm((b - mu)/sigma) - pnorm((a - mu)/sigma))
}
values = nlm(f = f,
p = start)$estimate
values
mean(x)
values = nlm(f = f,
p = start)
values
?dlomax
x = rlomax(100, 2, 3)
n = length(x)
f1 = function(lambda) {
S = sum(x/(1 + lambda*x))
- n*log(lambda) - n*log(n*1/S) + n + S
}
optimize(f = f1, interval = c(0, 100))
n = length(x)
f1 = function(lambda) {
S = mean(log(1 + lambda*x))
- log(lambda) - log(S) - S - 1
}
optimize(f = f1, interval = c(0, 100))
f1 = function(lambda) {
S = mean(log(1 + lambda*x))
log(lambda) - log(S) - S - 1
}
optimize(f = f1, interval = c(0, 100))
f1 = function(lambda) {
S = mean(log(1 + lambda*x))
log(lambda) - log(S) - S - 1
}
optimize(f = f1, interval = c(0, 1000))
mean(log(1 + lambda*x))
lambda = 10
lambda = 10
mean(log(1 + lambda*x))
?optimize
log(1.15)
mean(log(1 + 100*x))
log(100)
f1 = function(lambda) {
S = mean(log(1 + lambda*x))
log(lambda) - log(S) - S - 1
}
optimize(f = f1, interval = c(0, 1000))
x
x = rlomax(100, 2, 3)
f1 = function(lambda) {
S = mean(log(1 + lambda*x))
log(lambda) - log(S) - S - 1
}
optimize(f = f1, interval = c(0, 1000))
f1 = function(lambda) {
S = mean(log(1 + lambda*x))
log(lambda) - log(S) - S - 1
}
optimize(f = f1, interval = c(0, 1000))
assertthat::assert_that(min(x) > 0)
f1 = function(lambda) {
S = mean(log(1 + lambda*x))
log(lambda) - log(S) - S - 1
}
optimize(f = f1, interval = c(0, 1000))
lambdas = seq(0, 100, by = 0.01)
plot(lambdas, f1(lambdas))
plot(lambdas, sapply(lambdas, f1))
assertthat::assert_that(min(x) > 0)
f1 = function(lambda) {
sapply(lambda, function(lambda) {
S = mean(log(1 + lambda*x))
log(lambda) - log(S) - S - 1
}
}
optimize(f = f1, interval = c(0, 1000))
assertthat::assert_that(min(x) > 0)
f1 = function(lambda) {
sapply(lambda, function(lambda) {
S = mean(log(1 + lambda*x))
-log(lambda) + log(S) + S + 1
}
}
optimize(f = f1, interval = c(0, 1000))
assertthat::assert_that(min(x) > 0)
f1 = function(lambda) {
sapply(lambda, function(lambda) {
S = mean(log(1 + lambda*x))
-log(lambda) + log(S) + S + 1
}
}
optimize(f = f1, interval = c(0, 1000))
assertthat::assert_that(min(x) > 0)
f1 = function(lambda) {
sapply(lambda, function(lambda) {
S = mean(log(1 + lambda*x))
-log(lambda) + log(S) + S + 1
})
}
optimize(f = f1, interval = c(0, 1000))
x = rlomax(100, 9, 3)
assertthat::assert_that(min(x) > 0)
f1 = function(lambda) {
sapply(lambda, function(lambda) {
S = mean(log(1 + lambda*x))
-log(lambda) + log(S) + S + 1
})
}
optimize(f = f1, interval = c(0, 1000))
x = rlomax(100, 9, 3)
assertthat::assert_that(min(x) > 0)
f1 = function(lambda) {
sapply(lambda, function(lambda) {
S = mean(log(1 + lambda*x))
-log(lambda) + log(S) + S + 1
})
}
optimize(f = f1, interval = c(0, 1000))
x = rlomax(100, 1, 3)
assertthat::assert_that(min(x) > 0)
f1 = function(lambda) {
sapply(lambda, function(lambda) {
S = mean(log(1 + lambda*x))
-log(lambda) + log(S) + S + 1
})
}
optimize(f = f1, interval = c(0, 1000))
